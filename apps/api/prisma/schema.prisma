// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  password          String
  avatar            String?
  role              UserRole @default(MEMBER)
  emailVerified     Boolean  @default(false)
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  loginCount        Int      @default(0)
  lockedUntil       DateTime?
  workingHours      String?  // JSON: { start: "09:00", end: "17:00" }
  timeZone          String?
  notificationPrefs String?  // JSON: notification preferences
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  teamMemberships     TeamMember[]
  createdTeams        Team[]            @relation("TeamCreator")
  assignedTasks       Task[]            @relation("TaskAssignee")
  createdTasks        Task[]            @relation("TaskCreator")
  assignedStories     Story[]           @relation("StoryAssignee")
  createdStories      Story[]           @relation("StoryCreator")
  sprintComments      SprintComment[]
  storyComments       StoryComment[]
  retrospectiveItems  RetrospectiveItem[]
  actionItems         ActionItem[]      @relation("ActionItemAssignee")

  // Authentication relations
  loginAttempts       LoginAttempt[]
  refreshTokens       RefreshToken[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]

  @@index([email])
  @@index([isActive])
  @@index([emailVerified])
  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId String
  creator   User         @relation("TeamCreator", fields: [creatorId], references: [id])
  members   TeamMember[]
  projects  Project[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  role     UserRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  teamId String
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks  Task[]
  stories Story[]
  sprints Sprint[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  storyId String?
  story   Story?  @relation("StoryTasks", fields: [storyId], references: [id])

  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])

  creatorId String
  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])

  @@map("tasks")
}

model Sprint {
  id          String      @id @default(cuid())
  name        String
  goal        String?
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNING)
  capacity    Int?        // Team capacity in story points
  velocity    Int?        // Actual velocity after completion
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stories   Story[]
  comments  SprintComment[]
  retrospectives Retrospective[]

  @@map("sprints")
}

model Story {
  id                String         @id @default(cuid())
  title             String
  description       String?
  acceptanceCriteria String?
  storyPoints       Int?
  priority          Priority       @default(MEDIUM)
  status            StoryStatus    @default(TODO)
  type              StoryType      @default(FEATURE)
  refinementStatus  RefinementStatus @default(NOT_REFINED)
  tags              String[]       // Array of tags
  businessValue     Int?           // 1-100 scale
  rank              Int            @default(0) // Position within status column
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  sprintId String?
  sprint   Sprint? @relation(fields: [sprintId], references: [id])

  assigneeId String?
  assignee   User?   @relation("StoryAssignee", fields: [assigneeId], references: [id])

  creatorId String
  creator   User    @relation("StoryCreator", fields: [creatorId], references: [id])

  // Story hierarchy
  parentId String?
  parent   Story?  @relation("StoryHierarchy", fields: [parentId], references: [id])
  children Story[] @relation("StoryHierarchy")

  tasks    Task[]  @relation("StoryTasks")
  comments StoryComment[]

  @@map("stories")
}

model SprintComment {
  id        String   @id @default(cuid())
  content   String
  type      CommentType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sprintId String
  sprint   Sprint @relation(fields: [sprintId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  @@map("sprint_comments")
}

model StoryComment {
  id        String   @id @default(cuid())
  content   String
  type      CommentType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  storyId String
  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  authorId String
  author   User  @relation(fields: [authorId], references: [id])

  @@map("story_comments")
}

model Retrospective {
  id          String              @id @default(cuid())
  title       String
  type        RetrospectiveType   @default(LIGHTNING_DECISION_JAM)
  status      RetrospectiveStatus @default(PLANNING)
  facilitator String?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  sprintId String
  sprint   Sprint              @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  items    RetrospectiveItem[]
  actionItems ActionItem[]

  @@map("retrospectives")
}

model RetrospectiveItem {
  id          String                 @id @default(cuid())
  content     String
  category    RetrospectiveCategory  @default(WHAT_WENT_WELL)
  votes       Int                    @default(0)
  isAnonymous Boolean                @default(true)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relations
  retrospectiveId String
  retrospective   Retrospective @relation(fields: [retrospectiveId], references: [id], onDelete: Cascade)

  authorId String
  author   User  @relation(fields: [authorId], references: [id])

  @@map("retrospective_items")
}

model ActionItem {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      ActionItemStatus @default(OPEN)
  dueDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  retrospectiveId String
  retrospective   Retrospective @relation(fields: [retrospectiveId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?   @relation("ActionItemAssignee", fields: [assigneeId], references: [id])

  @@map("action_items")
}

model LoginAttempt {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  successful Boolean
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([successful])
  @@index([createdAt])
  @@index([ipAddress])
  @@map("login_attempts")
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([revokedAt])
  @@map("refresh_tokens")
}

model VerificationToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([usedAt])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([usedAt])
  @@map("password_reset_tokens")
}


// Enums
enum UserRole {
  ADMIN
  SCRUM_MASTER
  PRODUCT_OWNER
  DEVELOPER
  STAKEHOLDER
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum StoryStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum StoryType {
  FEATURE
  BUG
  ENHANCEMENT
  SPIKE
  EPIC
}

enum RefinementStatus {
  NOT_REFINED
  IN_REFINEMENT
  REFINED
  NEEDS_SPLITTING
}

enum CommentType {
  GENERAL
  IMPEDIMENT
  QUESTION
  DECISION
  ACTION_ITEM
}

enum RetrospectiveType {
  LIGHTNING_DECISION_JAM
  WHAT_WENT_WELL_WHAT_WENT_WRONG
  START_STOP_CONTINUE
  CUSTOM
}

enum RetrospectiveStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
}

enum RetrospectiveCategory {
  WHAT_WENT_WELL
  WHAT_WENT_WRONG
  WHAT_TO_IMPROVE
  ACTION_ITEM
  APPRECIATION
}

enum ActionItemStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
